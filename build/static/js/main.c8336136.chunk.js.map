{"version":3,"sources":["components/navbar/Navbar.js","components/image-results/imageResults.js","components/search/Search.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","title","ImageResults","ImageListContent","images","this","props","GridList","cols","map","img","tags","key","id","subtitle","user","actionIcon","color","src","largeImageURL","Component","Search","state","searchText","amount","apiUrl","apiKey","OnTextChange","e","setState","target","name","value","axios","get","then","res","data","hits","catch","err","console","log","onAmountChange","index","onChange","floatingLabelText","fullWidth","primaryText","length","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iVAKeA,EAFC,kBAAM,kBAAC,IAAD,CAAQC,MAAM,0B,gHCgDrBC,G,6LAzCP,IAAIC,EACIC,EAAWC,KAAKC,MAAhBF,OA4BR,OA1BID,EADDC,EAEK,kBAACG,EAAA,SAAD,CAAUC,KAAM,GACXJ,EAAOK,KAAI,SAAAC,GAAG,OACX,kBAAC,WAAD,CACAT,MAAOS,EAAIC,KACXC,IAAKF,EAAIG,GACTC,SACI,oCACO,gCAASJ,EAAIK,OAGxBC,WACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAQC,MAAM,YAIlB,yBAAKC,IAAKR,EAAIS,qBAMX,KAInB,6BACKhB,O,GAjCUiB,cCwDZC,E,2MAxDXC,MAAQ,CACJC,WAAY,GACZC,OAAQ,GACRC,OAAQ,yBACRC,OAAQ,qCACRtB,OAAQ,I,EAIhBuB,aAAe,SAAAC,GACX,EAAKC,SAAL,eAAgBD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,QAAQ,WAC7CC,IAAMC,IAAN,UAAa,EAAKZ,MAAMG,OAAxB,iBAAuC,EAAKH,MAAMI,OAAlD,cAA8D,EAAKJ,MAAMC,WAAzE,gDACW,EAAKD,MAAME,OADtB,qBAECW,MAAK,SAAAC,GAAG,OAAI,EAAKP,SAAS,CAACzB,OAAQgC,EAAIC,KAAKC,UAC5CC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,U,EAIlCG,eAAiB,SAACf,EAAGgB,EAAOZ,GAAX,OAAqB,EAAKH,SAAS,CAAEL,OAAQQ,K,wEAKtD,OADAS,QAAQC,IAAIrC,KAAKiB,MAAMlB,QAEnB,6BACA,kBAAC,IAAD,CACI2B,KAAK,aACLC,MAAO3B,KAAKiB,MAAMC,WAClBsB,SAAUxC,KAAKsB,aACfmB,kBAAkB,oBAClBC,WAAW,IAEf,6BACA,kBAAC,IAAD,CACIhB,KAAK,SACLe,kBAAkB,SAClBd,MAAO3B,KAAKiB,MAAME,OAClBqB,SAAUxC,KAAKsC,gBAGnB,kBAAC,IAAD,CAAUX,MAAO,EAAGgB,YAAY,MAChC,kBAAC,IAAD,CAAUhB,MAAO,GAAIgB,YAAY,OACjC,kBAAC,IAAD,CAAUhB,MAAO,GAAIgB,YAAY,OACjC,kBAAC,IAAD,CAAUhB,MAAO,GAAIgB,YAAY,OACjC,kBAAC,IAAD,CAAUhB,MAAO,GAAIgB,YAAY,QAGjC,6BACC3C,KAAKiB,MAAMlB,OAAO6C,OAAS,EAAK,kBAAC,EAAD,CAAc7C,OAAQC,KAAKiB,MAAMlB,SAAa,U,GAjDtEgB,aCYN8B,G,wLAXb,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,Y,GANU9B,cCME+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,MAAK,SAAA4B,GACjCA,EAAaC,kB","file":"static/js/main.c8336136.chunk.js","sourcesContent":["import React from 'react';\r\nimport AppBar from 'material-ui/AppBar';\r\n\r\nconst NavBar =  () => <AppBar title=\"PixaBay Image Finder\" />;\r\n\r\nexport default NavBar;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { GridList, GridTile } from 'material-ui/GridList';\r\nimport IconButton from 'material-ui/IconButton'; \r\nimport ZoomIn from 'material-ui/svg-icons/action/zoom-in';\r\nimport Dialog from 'material-ui/Dialog';\r\nimport FlatButton from 'material-ui/FlatButton';\r\n\r\nclass ImageResults extends Component {\r\n    render(){\r\n        let ImageListContent;\r\n        const { images } = this.props;\r\n        if(images) {\r\n            ImageListContent = (\r\n                <GridList cols={3}>\r\n                    {images.map(img => (\r\n                        <GridTile\r\n                        title={img.tags}\r\n                        key={img.id}\r\n                        subtitle={\r\n                            <span>\r\n                                by <strong>{img.user}</strong>\r\n                            </span>\r\n                        }\r\n                        actionIcon={\r\n                            <IconButton>\r\n                                <ZoomIn color=\"White\" />\r\n                            </IconButton>\r\n                        }\r\n                        >\r\n                            <img src={img.largeImageURL} />\r\n                        </GridTile>\r\n                    ))}\r\n                </GridList>\r\n            );\r\n        }else {\r\n            ImageListContent = null;\r\n        }\r\n\r\n        return(\r\n            <div>\r\n                {ImageListContent} \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nImageResults.propTypes = {\r\n    images: PropTypes.array.isRequired\r\n} \r\n\r\nexport default ImageResults;","import React, { Component } from 'react';\r\nimport TextField from 'material-ui/TextField';\r\nimport SelectField from 'material-ui/SelectField';\r\nimport { MenuItem } from 'material-ui';\r\nimport axios from 'axios';\r\nimport ImageResults from '../image-results/imageResults';\r\n\r\nclass Search extends Component {\r\n    state = {\r\n        searchText: '',\r\n        amount: 15,\r\n        apiUrl: 'https:/pixabay.com/api',\r\n        apiKey: '13572272-9bdd17488a9eda46aa101509a',\r\n        images: [],\r\n    };\r\n\r\n\r\nOnTextChange = e => {\r\n    this.setState({[e.target.name]: e.target.value}, () => {\r\n        axios.get(`${this.state.apiUrl}/?key=${this.state.apiKey}&q=${this.state.searchText}&image_type=photo&\r\n        per_page=${this.state.amount}&safesearch=true`)\r\n        .then(res => this.setState({images: res.data.hits}))\r\n        .catch(err => console.log(err));\r\n    });\r\n}\r\n\r\nonAmountChange = (e, index, value) => this.setState({ amount: value }\r\n    )\r\n\r\n    render(){\r\n        console.log(this.state.images)\r\n        return(\r\n            <div>\r\n            <TextField \r\n                name=\"searchText\"\r\n                value={this.state.searchText}\r\n                onChange={this.OnTextChange}\r\n                floatingLabelText=\"Search for images\"\r\n                fullWidth={true}\r\n            />\r\n            <br />\r\n            <SelectField\r\n                name=\"amount\"\r\n                floatingLabelText=\"Amount\"\r\n                value={this.state.amount}\r\n                onChange={this.onAmountChange}\r\n            >\r\n\r\n            <MenuItem value={5} primaryText=\"5\"/>\r\n            <MenuItem value={10} primaryText=\"10\"/>\r\n            <MenuItem value={15} primaryText=\"15\"/>\r\n            <MenuItem value={30} primaryText=\"30\"/>\r\n            <MenuItem value={50} primaryText=\"50\"/>\r\n             \r\n            </SelectField>\r\n            <br />\r\n            {this.state.images.length > 0 ? (<ImageResults images={this.state.images} />): null } \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Search;","import React, { Component } from 'react';\nimport MuiThemePorvider from 'material-ui/styles/MuiThemeProvider';\nimport NavBar from './components/navbar/Navbar';\nimport Search from './components/search/Search';\nimport './App.css';\n\nclass App extends Component {\n  render(){\n  return (\n    <MuiThemePorvider>\n      <div>\n        <NavBar />\n        <Search />\n      </div>\n    </MuiThemePorvider>\n  );\n }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}